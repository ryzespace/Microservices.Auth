name: üöÄ Build RyzeSpace Auth Microservice

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '10.0.x'
  SOLUTION_FILE: 'Microservices.Auth.sln'
  HOST_PROJECT: 'Host/Host.csproj'

jobs:
  build:
    name: üî® Build on ${{ matrix.os }} (${{ matrix.runtime }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            runtime: linux-x64
          - os: windows-latest
            runtime: win-x64
          - os: macos-latest
            runtime: osx-x64

    steps:
      # --- Setup ---
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # --- Cache ---
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # --- Build ---
      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: Build solution
        run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore

      # --- Publish ---
      - name: Publish application
        run: dotnet publish ${{ env.HOST_PROJECT }} --configuration Release --runtime ${{ matrix.runtime }} --self-contained false --output ./publish/${{ matrix.runtime }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-seller-${{ matrix.runtime }}
          path: ./publish/${{ matrix.runtime }}

      # --- Discord Notification ---
      - name: Notify Discord
        if: always()
        env:
          DISCORD_COLOR: ${{ job.status == 'success' && '3066993' || '15158332' }}
          STATUS_EMOJI: ${{ job.status == 'success' && 'üü¢' || 'üî¥' }}
        run: |
          # Get commit details
          $commitMessage = git log -1 --pretty=%B | Out-String -Stream | Where-Object { $_ -ne "" } | Select-Object -First 1
          if (-not $commitMessage) { $commitMessage = "<no commit message>" }
          $shortSha = "${{ github.sha }}".Substring(0,7)
          
          $payload = @"
          {
            "embeds": [{
              "title": "${{ github.workflow }} ${{ env.STATUS_EMOJI }}",
              "color": ${{ env.DISCORD_COLOR }},
              "fields": [
                {
                  "name": "üìÅ Project Info",
                  "value": "‚Ä¢ **Project**: Rentix Dashboard Seller\n‚Ä¢ **Environment**: ${{ github.event_name == 'push' && 'Production' || 'PR Preview' }}\n‚Ä¢ **Branch**: `${{ github.ref_name }}`\n‚Ä¢ **Commit**: [$shortSha](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})\n‚Ä¢ **Message**: \"$($commitMessage.Trim())\"",
                  "inline": true
                },
                {
                  "name": "‚öôÔ∏è Build Details",
                  "value": "‚Ä¢ **Artifact**: `dashboard-seller-${{ matrix.runtime }}`\n‚Ä¢ **Runtime**: `${{ matrix.runtime }}`\n‚Ä¢ **Triggered by**: ${{ github.actor }}",
                  "inline": true
                }
              ],
              "footer": {
                "text": "üñ•Ô∏è ${{ matrix.os }} | üìÖ $(Get-Date -Format 'yyyy-MM-dd HH:mm') UTC",
                "icon_url": "https://i.imgur.com/4ZiG3Y6.png"
              },
              "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }]
          }
          "@
          Invoke-RestMethod -Uri "${{ secrets.DISCORD_WEBHOOK_URL }}" -Method Post -Body $payload -ContentType 'application/json'
        shell: pwsh